/**
 * üîç Sistema de Valida√ß√£o de Fluxos
 * Detecta problemas e inconsist√™ncias antes de salvar
 */

import {
  DEFAULT_VALIDATION_CONFIG,
  ValidationConfig,
} from "./ValidationConfig";

export interface ValidationError {
  id: string;
  type: "error" | "warning" | "info";
  nodeId?: string;
  message: string;
  description?: string;
  suggestion?: string;
  category?: string;
}

export interface ValidationResult {
  isValid: boolean;
  errors: ValidationError[];
  warnings: ValidationError[];
  info: ValidationError[];
  summary: {
    totalIssues: number;
    criticalIssues: number;
    canSave: boolean;
    lastValidated: Date;
  };
}

export class FlowValidator {
  private nodes: any[];
  private edges: any[];
  private config: ValidationConfig;

  constructor(
    nodes: any[],
    edges: any[],
    config: ValidationConfig = DEFAULT_VALIDATION_CONFIG
  ) {
    this.nodes = nodes;
    this.edges = edges;
    this.config = config;
  }

  /**
   * üéØ Valida√ß√£o principal do fluxo
   */
  validateFlow(): ValidationResult {
    const errors: ValidationError[] = [];
    const warnings: ValidationError[] = [];
    const info: ValidationError[] = [];

    // 1. Valida√ß√µes cr√≠ticas (ERRORS)
    errors.push(...this.validateStructure());
    errors.push(...this.validateNodeConfiguration());
    errors.push(...this.validateVariables());
    errors.push(...this.validateConnections());

    // 2. Valida√ß√µes de boas pr√°ticas (WARNINGS)
    warnings.push(...this.validateBestPractices());
    warnings.push(...this.validatePerformance());
    warnings.push(...this.validateUsability());

    // 3. Informa√ß√µes √∫teis (INFO)
    info.push(...this.generateFlowInsights());

    return {
      isValid: errors.length === 0,
      errors,
      warnings,
      info,
      summary: {
        totalIssues: errors.length + warnings.length,
        criticalIssues: errors.length,
        canSave: errors.length === 0,
        lastValidated: new Date(),
      },
    };
  }

  /**
   * üèóÔ∏è Validar estrutura b√°sica do fluxo
   */
  private validateStructure(): ValidationError[] {
    const errors: ValidationError[] = [];

    // Verificar se h√° pelo menos um n√≥
    if (this.nodes.length === 0) {
      errors.push({
        id: "no-nodes",
        type: "error",
        message: "Fluxo vazio",
        description: "O fluxo precisa ter pelo menos um n√≥",
        suggestion: 'Adicione um n√≥ "In√≠cio" para come√ßar',
        category: "structure",
      });
      return errors;
    }

    // Verificar se h√° n√≥ de in√≠cio (se obrigat√≥rio)
    if (this.config.structure.requireStartNode) {
      const startNodes = this.nodes.filter((n) => n.data?.type === "start");
      if (startNodes.length === 0) {
        errors.push({
          id: "no-start",
          type: "error",
          message: "Sem ponto de entrada",
          description: 'Todo fluxo precisa ter um n√≥ "In√≠cio"',
          suggestion: 'Adicione um n√≥ "In√≠cio" ao fluxo',
          category: "structure",
        });
      } else if (
        !this.config.structure.allowMultipleStartNodes &&
        startNodes.length > 1
      ) {
        errors.push({
          id: "multiple-starts",
          type: "error",
          message: "M√∫ltiplos pontos de entrada",
          description: 'Um fluxo deve ter apenas um n√≥ "In√≠cio"',
          suggestion: 'Remova os n√≥s "In√≠cio" extras',
          category: "structure",
        });
      }
    }

    // Verificar n√≥s √≥rf√£os (sem conex√µes)
    const orphanNodes = this.findOrphanNodes();
    if (orphanNodes.length > this.config.structure.maxOrphanNodes) {
      orphanNodes.forEach((node) => {
        errors.push({
          id: `orphan-${node.id}`,
          type: "error",
          nodeId: node.id,
          message: "N√≥ desconectado",
          description: `O n√≥ "${
            node.data?.label || node.data?.type
          }" n√£o est√° conectado ao fluxo`,
          suggestion: "Conecte este n√≥ ao fluxo principal",
          category: "structure",
        });
      });
    }

    // Verificar n√≥s sem sa√≠da (exceto end nodes)
    const deadEndNodes = this.findDeadEndNodes();
    deadEndNodes.forEach((node) => {
      errors.push({
        id: `dead-end-${node.id}`,
        type: "error",
        nodeId: node.id,
        message: "N√≥ sem continua√ß√£o",
        description: `O n√≥ "${
          node.data?.label || node.data?.type
        }" n√£o tem pr√≥ximo passo`,
        suggestion: 'Adicione uma conex√£o ou transforme em n√≥ "Fim"',
        category: "structure",
      });
    });

    return errors;
  }

  /**
   * ‚öôÔ∏è Validar configura√ß√£o dos n√≥s
   */
  private validateNodeConfiguration(): ValidationError[] {
    const errors: ValidationError[] = [];

    this.nodes.forEach((node) => {
      const nodeType = node.data?.type;
      const nodeLabel = node.data?.label || nodeType;

      switch (nodeType) {
        case "message":
          if (!node.data?.message?.trim()) {
            errors.push({
              id: `message-empty-${node.id}`,
              type: "error",
              nodeId: node.id,
              message: "Mensagem vazia",
              description: `O n√≥ "${nodeLabel}" n√£o tem conte√∫do`,
              suggestion: 'Digite uma mensagem na aba "B√°sico"',
            });
          }
          break;

        case "input":
          if (!node.data?.message?.trim()) {
            errors.push({
              id: `input-no-prompt-${node.id}`,
              type: "error",
              nodeId: node.id,
              message: "Prompt obrigat√≥rio",
              description: `O n√≥ de input "${nodeLabel}" precisa de uma pergunta`,
              suggestion: 'Configure a mensagem de prompt na aba "B√°sico"',
            });
          }
          if (!node.data?.variableName?.trim()) {
            errors.push({
              id: `input-no-variable-${node.id}`,
              type: "error",
              nodeId: node.id,
              message: "Nome da vari√°vel obrigat√≥rio",
              description: `O n√≥ de input "${nodeLabel}" precisa salvar em uma vari√°vel`,
              suggestion: 'Configure o nome da vari√°vel na aba "Configura√ß√£o"',
            });
          }
          break;

        case "condition":
          if (!node.data?.conditions || node.data.conditions.length === 0) {
            errors.push({
              id: `condition-no-rules-${node.id}`,
              type: "error",
              nodeId: node.id,
              message: "Sem condi√ß√µes definidas",
              description: `O n√≥ de decis√£o "${nodeLabel}" n√£o tem regras`,
              suggestion: 'Adicione condi√ß√µes na aba "Condi√ß√µes"',
            });
          } else {
            // Validar cada condi√ß√£o
            node.data.conditions.forEach((condition: any, index: number) => {
              if (!condition.field?.trim()) {
                errors.push({
                  id: `condition-no-field-${node.id}-${index}`,
                  type: "error",
                  nodeId: node.id,
                  message: "Campo n√£o selecionado",
                  description: `Condi√ß√£o ${index + 1} n√£o tem campo definido`,
                  suggestion: "Selecione um campo para comparar",
                });
              }
              if (!condition.value?.trim()) {
                errors.push({
                  id: `condition-no-value-${node.id}-${index}`,
                  type: "error",
                  nodeId: node.id,
                  message: "Valor n√£o definido",
                  description: `Condi√ß√£o ${
                    index + 1
                  } n√£o tem valor para comparar`,
                  suggestion: "Digite um valor para compara√ß√£o",
                });
              }
            });
          }
          break;

        case "menu":
        case "mainMenu":
          // Validar mensagem do menu
          if (!node.data?.message?.trim() && !node.data?.label?.trim()) {
            errors.push({
              id: `menu-no-message-${node.id}`,
              type: "error",
              nodeId: node.id,
              message: "Menu sem mensagem",
              description: `O n√≥ menu "${nodeLabel}" precisa de uma mensagem ou t√≠tulo`,
              suggestion: 'Configure a mensagem na aba "B√°sico"',
            });
          }

          // Validar op√ß√µes do menu
          if (
            !node.data?.options ||
            !Array.isArray(node.data.options) ||
            node.data.options.length === 0
          ) {
            errors.push({
              id: `menu-no-options-${node.id}`,
              type: "error",
              nodeId: node.id,
              message: "Menu sem op√ß√µes",
              description: `O n√≥ menu "${nodeLabel}" n√£o tem op√ß√µes configuradas`,
              suggestion: 'Adicione op√ß√µes na aba "Menu"',
            });
          } else {
            // Validar cada op√ß√£o do menu
            node.data.options.forEach((option: any, index: number) => {
              if (!option.key?.trim()) {
                errors.push({
                  id: `menu-option-no-key-${node.id}-${index}`,
                  type: "error",
                  nodeId: node.id,
                  message: "Op√ß√£o sem chave",
                  description: `Op√ß√£o ${
                    index + 1
                  } do menu n√£o tem chave definida`,
                  suggestion:
                    "Digite uma chave para a op√ß√£o (ex: 1, A, opcao1)",
                });
              }
              if (!option.text?.trim()) {
                errors.push({
                  id: `menu-option-no-text-${node.id}-${index}`,
                  type: "error",
                  nodeId: node.id,
                  message: "Op√ß√£o sem texto",
                  description: `Op√ß√£o ${
                    index + 1
                  } do menu n√£o tem texto explicativo`,
                  suggestion: "Digite um texto descritivo para a op√ß√£o",
                });
              }

              // Verificar se a chave √© √∫nica dentro do menu
              const duplicateKeys = node.data.options.filter(
                (opt: any, i: number) => i !== index && opt.key === option.key
              );
              if (duplicateKeys.length > 0) {
                errors.push({
                  id: `menu-duplicate-key-${node.id}-${index}`,
                  type: "error",
                  nodeId: node.id,
                  message: "Chave duplicada",
                  description: `A chave "${option.key}" est√° sendo usada em m√∫ltiplas op√ß√µes`,
                  suggestion: "Use chaves √∫nicas para cada op√ß√£o do menu",
                });
              }
            });

            // Verificar se h√° muitas op√ß√µes (UX)
            if (
              node.data.options.length > this.config.usability.maxMenuOptions
            ) {
              errors.push({
                id: `menu-too-many-options-${node.id}`,
                type: "warning",
                nodeId: node.id,
                message: "Muitas op√ß√µes no menu",
                description: `Menu com ${node.data.options.length} op√ß√µes pode confundir o usu√°rio`,
                suggestion: "Considere dividir em submenus ou reduzir op√ß√µes",
                category: "usability",
              });
            }
          }

          // Validar se menu principal est√° marcado corretamente
          if (node.data?.type === "mainMenu" && !node.data?.isMainMenu) {
            errors.push({
              id: `main-menu-not-marked-${node.id}`,
              type: "warning",
              nodeId: node.id,
              message: "Menu principal n√£o marcado",
              description: "N√≥ do tipo 'mainMenu' deve ter isMainMenu = true",
              suggestion: "Marque como menu principal nas configura√ß√µes",
              category: "configuration",
            });
          }
          break;

        case "webhook":
          if (!node.data?.webhookUrl?.trim()) {
            errors.push({
              id: `webhook-no-url-${node.id}`,
              type: "error",
              nodeId: node.id,
              message: "URL do webhook obrigat√≥ria",
              description: `O n√≥ webhook "${nodeLabel}" n√£o tem URL configurada`,
              suggestion: 'Configure a URL na aba "Integra√ß√£o"',
            });
          } else {
            // Validar formato da URL
            try {
              new URL(node.data.webhookUrl);
            } catch {
              errors.push({
                id: `webhook-invalid-url-${node.id}`,
                type: "error",
                nodeId: node.id,
                message: "URL inv√°lida",
                description: `A URL "${node.data.webhookUrl}" n√£o √© v√°lida`,
                suggestion:
                  "Verifique o formato da URL (ex: https://api.exemplo.com)",
              });
            }
          }
          break;
      }
    });

    return errors;
  }

  /**
   * üì¶ Validar uso de vari√°veis
   */
  private validateVariables(): ValidationError[] {
    const errors: ValidationError[] = [];
    const definedVariables = new Set<string>();
    const usedVariables = new Set<string>();

    // Mapear vari√°veis definidas
    this.nodes.forEach((node) => {
      if (node.data?.type === "input" && node.data?.variableName) {
        definedVariables.add(node.data.variableName);
      }
      if (node.data?.type === "webhook" && node.data?.responseVariable) {
        definedVariables.add(node.data.responseVariable);
      }
    });

    // Mapear vari√°veis usadas
    this.nodes.forEach((node) => {
      if (node.data?.type === "condition" && node.data?.conditions) {
        node.data.conditions.forEach((condition: any) => {
          if (
            condition.field &&
            !["message", "user_message", "lastUserMessage"].includes(
              condition.field
            )
          ) {
            usedVariables.add(condition.field);
          }
        });
      }
      if (node.data?.type === "webhook" && node.data?.customPayload) {
        const matches = node.data.customPayload.match(/\{\{(\w+)\}\}/g);
        if (matches) {
          matches.forEach((match: string) => {
            const varName = match.replace(/\{\{|\}\}/g, "");
            usedVariables.add(varName);
          });
        }
      }
    });

    // Verificar vari√°veis usadas mas n√£o definidas
    usedVariables.forEach((varName) => {
      if (!definedVariables.has(varName)) {
        errors.push({
          id: `undefined-variable-${varName}`,
          type: "error",
          message: "Vari√°vel n√£o definida",
          description: `A vari√°vel "${varName}" √© usada mas nunca foi definida`,
          suggestion: "Crie um n√≥ de input para capturar esta vari√°vel",
        });
      }
    });

    return errors;
  }

  /**
   * üîó Validar conex√µes entre n√≥s
   */
  private validateConnections(): ValidationError[] {
    const errors: ValidationError[] = [];

    // Verificar n√≥s de condi√ß√£o com conex√µes suficientes
    this.nodes.forEach((node) => {
      if (node.data?.type === "condition") {
        const outgoingEdges = this.edges.filter((e) => e.source === node.id);
        const conditions = node.data?.conditions || [];

        // Precisa ter pelo menos uma conex√£o para cada condi√ß√£o + uma para "caso contr√°rio"
        if (outgoingEdges.length < conditions.length) {
          errors.push({
            id: `condition-missing-paths-${node.id}`,
            type: "error",
            nodeId: node.id,
            message: "Conex√µes insuficientes",
            description:
              "N√≥ de condi√ß√£o precisa de conex√£o para cada resultado poss√≠vel",
            suggestion: "Conecte todas as sa√≠das poss√≠veis da condi√ß√£o",
          });
        }
      }

      // Verificar menu com op√ß√µes conectadas
      if (node.data?.type === "menu") {
        const outgoingEdges = this.edges.filter((e) => e.source === node.id);
        const menuOptions = node.data?.options || [];

        if (outgoingEdges.length < menuOptions.length) {
          errors.push({
            id: `menu-missing-connections-${node.id}`,
            type: "error",
            nodeId: node.id,
            message: "Op√ß√µes de menu sem destino",
            description: "Todas as op√ß√µes do menu precisam estar conectadas",
            suggestion: "Conecte cada op√ß√£o do menu a um pr√≥ximo passo",
          });
        }
      }
    });

    // Verificar loops infinitos
    const loops = this.detectCycles();
    loops.forEach((loop) => {
      errors.push({
        id: `infinite-loop-${loop.join("-")}`,
        type: "error",
        message: "Loop infinito detectado",
        description: `Ciclo encontrado entre os n√≥s: ${loop.join(" ‚Üí ")}`,
        suggestion:
          "Adicione uma condi√ß√£o de parada ou remova a conex√£o circular",
      });
    });

    return errors;
  }

  /**
   * üìã Validar boas pr√°ticas
   */
  private validateBestPractices(): ValidationError[] {
    const warnings: ValidationError[] = [];

    // üö® NOVO: Verificar m√∫ltiplos n√≥s de menu
    const menuNodes = this.nodes.filter(
      (node) => node.data?.type === "menu" || node.data?.type === "mainMenu"
    );

    if (menuNodes.length > 1) {
      // Verificar se h√° l√≥gica para retornar ao menu principal
      const hasMenuLogic = this.validateMenuReturnLogic(menuNodes);

      if (!hasMenuLogic) {
        warnings.push({
          id: "multiple-menus-no-logic",
          type: "warning",
          message: "M√∫ltiplos menus sem l√≥gica de retorno",
          description: `${menuNodes.length} menus encontrados, mas sem l√≥gica para retornar ao menu principal quando n√£o h√° pr√≥ximo passo`,
          suggestion:
            "Configure um menu como principal e adicione l√≥gica de fallback para retornar a ele",
          category: "navigation",
        });
      }
    }

    // üö® NOVO: Verificar n√≥s sem sa√≠da que n√£o s√£o finais
    warnings.push(...this.validateNodeExitPaths());

    // Verificar n√≥s muito pr√≥ximos
    this.nodes.forEach((node) => {
      const closeNodes = this.nodes.filter(
        (other) =>
          other.id !== node.id &&
          Math.abs(other.position.x - node.position.x) < 50 &&
          Math.abs(other.position.y - node.position.y) < 50
      );

      if (closeNodes.length > 0) {
        warnings.push({
          id: `nodes-too-close-${node.id}`,
          type: "warning",
          nodeId: node.id,
          message: "N√≥s muito pr√≥ximos",
          description: "N√≥s pr√≥ximos podem dificultar a visualiza√ß√£o",
          suggestion: "Organize melhor o layout do fluxo",
        });
      }
    });

    // Verificar fluxos muito longos sem fim
    const pathLength = this.calculateLongestPath();
    if (pathLength > 10) {
      warnings.push({
        id: "flow-too-long",
        type: "warning",
        message: "Fluxo muito longo",
        description: `O fluxo tem ${pathLength} passos, pode ser complexo demais`,
        suggestion: "Considere dividir em subfluxos menores",
      });
    }

    // Verificar condi√ß√µes sem else
    this.nodes.forEach((node) => {
      if (
        node.data?.type === "condition" &&
        node.data?.conditions?.length === 1
      ) {
        warnings.push({
          id: `condition-no-else-${node.id}`,
          type: "warning",
          nodeId: node.id,
          message: "Condi√ß√£o sem alternativa",
          description: "Condi√ß√£o com apenas uma op√ß√£o pode travar o fluxo",
          suggestion: 'Adicione uma condi√ß√£o "caso contr√°rio"',
        });
      }
    });

    // Verificar n√≥s de input consecutivos
    this.edges.forEach((edge) => {
      const sourceNode = this.nodes.find((n) => n.id === edge.source);
      const targetNode = this.nodes.find((n) => n.id === edge.target);

      if (
        sourceNode?.data?.type === "input" &&
        targetNode?.data?.type === "input"
      ) {
        warnings.push({
          id: `consecutive-inputs-${edge.source}-${edge.target}`,
          type: "warning",
          nodeId: edge.source,
          message: "Inputs consecutivos",
          description: "M√∫ltiplas perguntas seguidas podem cansar o usu√°rio",
          suggestion:
            "Considere agrupar perguntas ou adicionar mensagens explicativas",
        });
      }
    });

    return warnings;
  }

  /**
   * üéØ Validar usabilidade
   */
  private validateUsability(): ValidationError[] {
    const warnings: ValidationError[] = [];

    // Verificar mensagens muito longas
    this.nodes.forEach((node) => {
      if (
        node.data?.message &&
        node.data.message.length > this.config.usability.maxMessageLength
      ) {
        warnings.push({
          id: `message-too-long-${node.id}`,
          type: "warning",
          nodeId: node.id,
          message: "Mensagem muito longa",
          description: `Mensagem com ${node.data.message.length} caracteres (m√°ximo recomendado: ${this.config.usability.maxMessageLength})`,
          suggestion: "Divida em mensagens menores ou use formata√ß√£o",
          category: "usability",
        });
      }
    });

    // Verificar menu com muitas op√ß√µes
    this.nodes.forEach((node) => {
      if (
        node.data?.type === "menu" &&
        node.data?.options?.length > this.config.usability.maxMenuOptions
      ) {
        warnings.push({
          id: `menu-too-many-options-${node.id}`,
          type: "warning",
          nodeId: node.id,
          message: "Menu com muitas op√ß√µes",
          description: `Menu com ${node.data.options.length} op√ß√µes (m√°ximo recomendado: ${this.config.usability.maxMenuOptions})`,
          suggestion: "Agrupe op√ß√µes relacionadas ou divida em submenus",
          category: "usability",
        });
      }
    });

    // Verificar falta de mensagens de boas-vindas (se obrigat√≥rio)
    if (this.config.usability.requireWelcomeMessage) {
      const startNode = this.nodes.find((n) => n.data?.type === "start");
      if (startNode) {
        const firstConnections = this.edges.filter(
          (e) => e.source === startNode.id
        );
        const hasWelcomeMessage = firstConnections.some((edge) => {
          const targetNode = this.nodes.find((n) => n.id === edge.target);
          return targetNode?.data?.type === "message";
        });

        if (!hasWelcomeMessage) {
          warnings.push({
            id: "no-welcome-message",
            type: "warning",
            nodeId: startNode.id,
            message: "Sem mensagem de boas-vindas",
            description:
              "√â recomendado come√ßar com uma mensagem de boas-vindas",
            suggestion:
              "Adicione uma mensagem explicando o que o bot pode fazer",
            category: "usability",
          });
        }
      }
    }

    // Verificar inputs consecutivos
    let consecutiveInputs = 0;
    const inputSequences: string[] = [];

    this.edges.forEach((edge) => {
      const sourceNode = this.nodes.find((n) => n.id === edge.source);
      const targetNode = this.nodes.find((n) => n.id === edge.target);

      if (
        sourceNode?.data?.type === "input" &&
        targetNode?.data?.type === "input"
      ) {
        consecutiveInputs++;
        inputSequences.push(`${edge.source}-${edge.target}`);

        if (consecutiveInputs >= this.config.usability.maxConsecutiveInputs) {
          warnings.push({
            id: `too-many-consecutive-inputs-${edge.source}`,
            type: "warning",
            nodeId: edge.source,
            message: "Muitos inputs consecutivos",
            description: `${
              consecutiveInputs + 1
            } perguntas seguidas podem cansar o usu√°rio`,
            suggestion:
              "Considere agrupar perguntas ou adicionar mensagens explicativas",
            category: "usability",
          });
        }
      } else {
        consecutiveInputs = 0;
      }
    });

    return warnings;
  }

  /**
   * ‚ö° Validar performance
   */
  private validatePerformance(): ValidationError[] {
    const warnings: ValidationError[] = [];

    // Verificar muitos webhooks em sequ√™ncia
    let webhookSequence = 0;
    this.nodes.forEach((node) => {
      if (node.data?.type === "webhook") {
        webhookSequence++;
      } else {
        if (webhookSequence > 2) {
          warnings.push({
            id: `too-many-webhooks-${node.id}`,
            type: "warning",
            message: "Muitos webhooks consecutivos",
            description: "M√∫ltiplos webhooks podem causar lentid√£o",
            suggestion: "Considere combinar as chamadas em um √∫nico webhook",
          });
        }
        webhookSequence = 0;
      }
    });

    return warnings;
  }

  /**
   * üí° Gerar insights do fluxo
   */
  private generateFlowInsights(): ValidationError[] {
    const insights: ValidationError[] = [];

    insights.push({
      id: "flow-stats",
      type: "info",
      message: "Estat√≠sticas do fluxo",
      description: `${this.nodes.length} n√≥s, ${this.edges.length} conex√µes`,
    });

    const inputNodes = this.nodes.filter(
      (n) => n.data?.type === "input"
    ).length;
    if (inputNodes > 0) {
      insights.push({
        id: "data-collection",
        type: "info",
        message: "Coleta de dados",
        description: `O fluxo coleta ${inputNodes} tipo(s) de dados do usu√°rio`,
      });
    }

    return insights;
  }

  /**
   * üîç Encontrar n√≥s √≥rf√£os
   */
  private findOrphanNodes(): any[] {
    const connectedNodes = new Set();

    this.edges.forEach((edge) => {
      connectedNodes.add(edge.source);
      connectedNodes.add(edge.target);
    });

    return this.nodes.filter((node) => !connectedNodes.has(node.id));
  }

  /**
   * ‚ö∞Ô∏è Encontrar n√≥s sem sa√≠da
   */
  private findDeadEndNodes(): any[] {
    const nodesWithOutput = new Set();

    this.edges.forEach((edge) => {
      nodesWithOutput.add(edge.source);
    });

    return this.nodes.filter(
      (node) =>
        !nodesWithOutput.has(node.id) &&
        node.data?.type !== "end" &&
        node.data?.type !== "transfer" &&
        node.data?.type !== "ticket"
    );
  }

  /**
   * üìè Calcular caminho mais longo
   */
  private calculateLongestPath(): number {
    // Implementa√ß√£o simplificada - pode ser melhorada com algoritmo de grafos
    const startNode = this.nodes.find((n) => n.data?.type === "start");
    if (!startNode) return 0;

    const visited = new Set();
    const dfs = (nodeId: string): number => {
      if (visited.has(nodeId)) return 0;
      visited.add(nodeId);

      const outgoingEdges = this.edges.filter((e) => e.source === nodeId);
      if (outgoingEdges.length === 0) return 1;

      return 1 + Math.max(...outgoingEdges.map((e) => dfs(e.target)));
    };

    return dfs(startNode.id);
  }

  /**
   * üîÑ Detectar ciclos no fluxo
   */
  private detectCycles(): string[][] {
    const cycles: string[][] = [];
    const visited = new Set<string>();
    const recursionStack = new Set<string>();
    const currentPath: string[] = [];

    const dfs = (nodeId: string): void => {
      if (recursionStack.has(nodeId)) {
        // Encontrou um ciclo
        const cycleStart = currentPath.indexOf(nodeId);
        if (cycleStart !== -1) {
          cycles.push([...currentPath.slice(cycleStart), nodeId]);
        }
        return;
      }

      if (visited.has(nodeId)) return;

      visited.add(nodeId);
      recursionStack.add(nodeId);
      currentPath.push(nodeId);

      const outgoingEdges = this.edges.filter((e) => e.source === nodeId);
      outgoingEdges.forEach((edge) => {
        dfs(edge.target);
      });

      recursionStack.delete(nodeId);
      currentPath.pop();
    };

    // Executar DFS para cada n√≥ n√£o visitado
    this.nodes.forEach((node) => {
      if (!visited.has(node.id)) {
        dfs(node.id);
      }
    });

    return cycles;
  }

  /**
   * üçΩÔ∏è Validar l√≥gica de retorno para menus
   */
  private validateMenuReturnLogic(menuNodes: any[]): boolean {
    // Verificar se h√° um menu principal definido
    const mainMenu = menuNodes.find(
      (node) => node.data?.type === "mainMenu" || node.data?.isMainMenu
    );

    if (!mainMenu) {
      return false;
    }

    // Verificar se n√≥s sem sa√≠da podem retornar ao menu principal
    const deadEndNodes = this.findDeadEndNodes();
    const hasReturnPath = deadEndNodes.every((deadNode) => {
      // Para cada n√≥ sem sa√≠da, verificar se existe um caminho poss√≠vel de volta ao menu
      return this.canReachNode(deadNode.id, mainMenu.id);
    });

    return hasReturnPath;
  }

  /**
   * üõ£Ô∏è Verificar se um n√≥ pode alcan√ßar outro n√≥
   */
  private canReachNode(fromNodeId: string, toNodeId: string): boolean {
    const visited = new Set<string>();
    const queue = [fromNodeId];

    while (queue.length > 0) {
      const currentNodeId = queue.shift()!;

      if (currentNodeId === toNodeId) {
        return true;
      }

      if (visited.has(currentNodeId)) {
        continue;
      }

      visited.add(currentNodeId);

      const outgoingEdges = this.edges.filter(
        (e) => e.source === currentNodeId
      );
      outgoingEdges.forEach((edge) => {
        if (!visited.has(edge.target)) {
          queue.push(edge.target);
        }
      });
    }

    return false;
  }

  /**
   * üö™ Validar caminhos de sa√≠da dos n√≥s
   */
  private validateNodeExitPaths(): ValidationError[] {
    const warnings: ValidationError[] = [];

    // Encontrar menu principal
    const mainMenu = this.nodes.find(
      (node) => node.data?.type === "mainMenu" || node.data?.isMainMenu
    );

    // Verificar cada n√≥ que n√£o √© terminal
    this.nodes.forEach((node) => {
      if (
        node.data?.type !== "end" &&
        node.data?.type !== "transfer" &&
        node.data?.type !== "ticket"
      ) {
        const outgoingEdges = this.edges.filter((e) => e.source === node.id);

        // Se n√£o tem sa√≠da e n√£o √© terminal
        if (outgoingEdges.length === 0) {
          // Verificar se √© um n√≥ que deveria retornar ao menu
          if (mainMenu && node.id !== mainMenu.id) {
            warnings.push({
              id: `should-return-to-menu-${node.id}`,
              type: "warning",
              nodeId: node.id,
              message: "N√≥ sem retorno ao menu",
              description: `O n√≥ "${
                node.data?.label || node.data?.type
              }" n√£o tem pr√≥ximo passo nem conex√£o para retornar ao menu principal`,
              suggestion: `Conecte este n√≥ ao menu principal ou adicione um n√≥ de finaliza√ß√£o`,
              category: "navigation",
            });
          }
        }

        // Verificar se n√≥s de a√ß√£o/resposta t√™m sa√≠da apropriada
        if (
          (node.data?.type === "message" ||
            node.data?.type === "action" ||
            node.data?.type === "webhook") &&
          outgoingEdges.length === 0
        ) {
          warnings.push({
            id: `action-no-continuation-${node.id}`,
            type: "warning",
            nodeId: node.id,
            message: "A√ß√£o sem continua√ß√£o",
            description: `O n√≥ "${
              node.data?.label || node.data?.type
            }" executa uma a√ß√£o mas n√£o tem pr√≥ximo passo definido`,
            suggestion: mainMenu
              ? `Conecte ao menu principal ou adicione um n√≥ de finaliza√ß√£o`
              : `Adicione um pr√≥ximo passo ou n√≥ de finaliza√ß√£o`,
            category: "flow",
          });
        }
      }
    });

    return warnings;
  }
}
