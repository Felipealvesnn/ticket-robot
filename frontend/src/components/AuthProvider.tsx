"use client";

import { useAuthStore } from "@/store/auth";
import { useRouter } from "next/navigation";
import { useEffect } from "react";
import SessionsAutoJoiner from "./SessionsAutoJoiner";
import SessionsMessageListener from "./SessionsMessageListener";

interface AuthProviderProps {
  children: React.ReactNode;
}

export default function AuthProvider({ children }: AuthProviderProps) {
  const { checkAuth, isLoading, isAuthenticated, hasCheckedAuth, user } =
    useAuthStore();
  const router = useRouter();


  // Verificar autentica칞칚o quando a aplica칞칚o iniciar (apenas se n칚o foi hidratado corretamente)
  useEffect(() => {
    // Se n칚o verificou ainda, ou se verificou mas n칚o tem usu치rio e tem token, re-verificar
    const token =
      typeof window !== "undefined" ? localStorage.getItem("auth_token") : null;

    if (!hasCheckedAuth || (!user && token)) {
      console.log("游댌 Iniciando verifica칞칚o de auth...");
      checkAuth();
    }
  }, [checkAuth, hasCheckedAuth, user]); // Redirecionar para login se n칚o autenticado (APENAS AP칍S VERIFICA칂츾O)
  useEffect(() => {
    // S칩 redirecionar se j치 verificou E n칚o tem usu치rio salvo E n칚o tem token
    const token =
      typeof window !== "undefined" ? localStorage.getItem("auth_token") : null;

    if (hasCheckedAuth && !user && !token) {
      console.log("游댃 Redirecionando para login - sem usu치rio e sem token");
      router.replace("/login");
    }
  }, [hasCheckedAuth, user, router]);
  // Mostrar loading enquanto verifica autentica칞칚o inicial
  if (!hasCheckedAuth || isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <div className="flex flex-col items-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
          <p className="mt-4 text-gray-600">Verificando autentica칞칚o...</p>
        </div>
      </div>
    );
  }
  // Se n칚o tem usu치rio ap칩s verifica칞칚o, n칚o renderizar nada (vai redirecionar)
  if (!user && hasCheckedAuth) {
    return null;
  }

  return (
    <>
      {/* Componente que faz join autom치tico nas sess칫es */}
      <SessionsAutoJoiner />

      {/* Componente que escuta mensagens das sess칫es */}
      <SessionsMessageListener />

      {children}
    </>
  );
}
