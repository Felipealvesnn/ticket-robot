import api from "@/services/api";
import { socketManager } from "@/services/socketManager";
import * as Types from "@/types";
import { create } from "zustand";
import { devtools, persist } from "zustand/middleware";

interface SessionsState {
  // Estado principal das sess√µes
  sessions: Types.Session[];
  isLoading: boolean;
  error: string | null;

  // Estado para controle de recarregamento por empresa
  isReloadingForCompany: boolean;

  // Estados em tempo real das sess√µes (via Socket)
  sessionStatuses: Record<
    string,
    {
      status: "connecting" | "connected" | "disconnected" | "error";
      lastActivity?: string;
      error?: string;
    }
  >;
  sessionQrCodes: Record<
    string,
    {
      qrCode: string;
      timestamp: string;
    }
  >;

  // CRUD de sess√µes
  loadSessions: () => Promise<void>;
  createSession: (data: Types.CreateSessionRequest) => Promise<void>;
  deleteSession: (id: string) => Promise<void>;
  restartSession: (id: string) => Promise<void>;

  // Aliases para compatibilidade
  addSession: (name: string) => Promise<void>;
  removeSession: (id: string) => Promise<void>;

  // Gerenciamento de mudan√ßa de empresa
  handleCompanyChange: () => Promise<void>;

  // Gerenciamento de Socket para sess√µes
  joinSession: (sessionId: string) => void;
  leaveSession: (sessionId: string) => void;
  joinAllSessions: () => void;

  // Gerenciamento de QR Codes e Status
  updateSessionStatus: (
    sessionId: string,
    status: string,
    error?: string
  ) => void;
  setSessionQrCode: (
    sessionId: string,
    qrCode: string,
    timestamp?: string
  ) => void;
  getSessionQrCode: (sessionId: string) => string | null;
  clearSessionQrCode: (sessionId: string) => void;
  getSessionStatus: (sessionId: string) => string | null;

  // Socket integration
  setupSocketListeners: () => void;
  cleanupSocketListeners: () => void;

  // Utilit√°rios
  setLoading: (loading: boolean) => void;
  setError: (error: string | null) => void;
  transformSession: (session: any) => Types.Session;
  normalizeQrCode: (qrCode: string) => string;
}

export const useSessionsStore = create<SessionsState>()(
  devtools(
    persist(
      (set, get) => ({
        // Estado inicial
        sessions: [],
        isLoading: false,
        error: null,
        isReloadingForCompany: false,
        sessionStatuses: {},
        sessionQrCodes: {},

        // Fun√ß√£o helper para transformar dados do backend
        transformSession: (session: any): Types.Session => ({
          ...session,
          status:
            session.currentStatus === "connected"
              ? "connected"
              : session.currentStatus === "connecting"
              ? "connecting"
              : "disconnected",
          lastActivity: session.lastSeen
            ? new Date(session.lastSeen).toLocaleString("pt-BR")
            : "Nunca",
          messagesCount: session.messagesCount || 0,
          qrCode: session.qrCode, // Garantir que o QR Code seja mapeado
        }),

        // Fun√ß√£o helper para normalizar formato do QR Code
        normalizeQrCode: (qrCode: string): string => {
          // Se j√° √© um data URL, retorna como est√°
          if (qrCode.startsWith("data:image/")) {
            return qrCode;
          }

          // Se √© apenas base64, adiciona o prefixo data URL
          return `data:image/png;base64,${qrCode}`;
        },

        // Carregar sess√µes
        loadSessions: async () => {
          const {
            setLoading,
            setError,
            joinAllSessions,
            setSessionQrCode,
            normalizeQrCode,
          } = get();

          setLoading(true);
          setError(null);

          try {
            const rawSessions = await api.sessions.getAll();
            const sessions = rawSessions.map(get().transformSession);
            set({ sessions });

            // Carregar QR Codes existentes das sess√µes
            sessions.forEach((session) => {
              if (session.qrCode) {
                console.log(
                  "üì± QR Code encontrado para sess√£o existente:",
                  session.id
                );
                setSessionQrCode(session.id, normalizeQrCode(session.qrCode));
              }
            });

            // Auto-join nas sess√µes
            joinAllSessions();
          } catch (error) {
            setError(
              error instanceof Error
                ? error.message
                : "Erro ao carregar sess√µes"
            );
          } finally {
            setLoading(false);
          }
        },

        // Criar nova sess√£o
        createSession: async (data: Types.CreateSessionRequest) => {
          const {
            setLoading,
            setError,
            loadSessions,
            setSessionQrCode,
            joinSession,
            normalizeQrCode,
            transformSession,
          } = get();

          setLoading(true);
          setError(null);

          try {
            // Criar a sess√£o e capturar a resposta
            const response = await api.sessions.create(data);

            console.log("üî• Resposta completa da cria√ß√£o da sess√£o:", response);

            // üöÄ IMEDIATAMENTE adicionar a sess√£o ao store local
            const newSession = transformSession(response);
            set((state) => ({
              sessions: [...state.sessions, newSession],
            }));

            // Se a resposta cont√©m QR Code, armazenar imediatamente
            if (response.qrCode) {
              console.log(
                "üöÄ QR Code inicial recebido na cria√ß√£o da sess√£o:",
                response.id,
                "QR Code:",
                response.qrCode?.substring(0, 50) + "..."
              );
              setSessionQrCode(response.id, normalizeQrCode(response.qrCode));
            } else {
              console.warn(
                "‚ö†Ô∏è Resposta da cria√ß√£o n√£o cont√©m QR Code:",
                response
              );
            }

            // Fazer join na sess√£o criada para receber atualiza√ß√µes em tempo real
            joinSession(response.id);

            // Recarregar todas as sess√µes (para sincronizar com backend)
            await loadSessions();
          } catch (error) {
            setError(
              error instanceof Error ? error.message : "Erro ao criar sess√£o"
            );
            throw error;
          } finally {
            setLoading(false);
          }
        },

        // Deletar sess√£o
        deleteSession: async (id: string) => {
          const { setLoading, setError, loadSessions, leaveSession } = get();

          setLoading(true);
          setError(null);

          try {
            // Leave session antes de deletar
            leaveSession(id);

            await api.sessions.delete(id);
            await loadSessions();
          } catch (error) {
            setError(
              error instanceof Error ? error.message : "Erro ao deletar sess√£o"
            );
            throw error;
          } finally {
            setLoading(false);
          }
        },

        // Reiniciar sess√£o (apenas cliente WhatsApp - dados preservados)
        restartSession: async (id: string) => {
          const { setLoading, setError, loadSessions } = get();

          setLoading(true);
          setError(null);

          try {
            await api.sessions.restart(id);
            await loadSessions();
            // Opcional: Adicionar notifica√ß√£o de sucesso
            console.log(
              "‚úÖ Cliente WhatsApp reiniciado com sucesso. Dados preservados."
            );
          } catch (error) {
            setError(
              error instanceof Error
                ? error.message
                : "Erro ao reiniciar cliente WhatsApp"
            );
            throw error;
          } finally {
            setLoading(false);
          }
        },

        // Aliases para compatibilidade
        addSession: async (name: string) => {
          await get().createSession({ name });
        },

        removeSession: async (id: string) => {
          await get().deleteSession(id);
        },

        // Gerenciamento de mudan√ßa de empresa
        handleCompanyChange: async () => {
          const { setError, loadSessions } = get();

          console.log("üè¢ Empresa alterada, recarregando sess√µes...");

          set({ isReloadingForCompany: true });
          setError(null);

          try {
            // Recarregar sess√µes para a nova empresa
            await loadSessions();
          } catch (error) {
            setError(
              error instanceof Error
                ? error.message
                : "Erro ao recarregar sess√µes para a empresa"
            );
          } finally {
            set({ isReloadingForCompany: false });
          }
        },

        // Socket Management para Sess√µes
        joinSession: (sessionId: string) => {
          if (!socketManager.isConnected()) {
            console.warn("‚ö†Ô∏è Socket n√£o conectado para joinSession");
            return;
          }

          // Verificar se j√° est√° na sess√£o para evitar joins duplicados
          const { sessionStatuses } = get();
          if (sessionStatuses[sessionId]) {
            console.log(`üì± Sess√£o ${sessionId} j√° est√° sendo monitorada`);
            return;
          }

          socketManager.joinSession(sessionId);
          console.log(`üì± Joined session: ${sessionId}`);
        },

        leaveSession: (sessionId: string) => {
          if (!socketManager.isConnected()) {
            return;
          }

          const { sessionStatuses, sessionQrCodes } = get();

          // Limpar dados da sess√£o
          const newStatuses = { ...sessionStatuses };
          const newQrCodes = { ...sessionQrCodes };
          delete newStatuses[sessionId];
          delete newQrCodes[sessionId];

          set({
            sessionStatuses: newStatuses,
            sessionQrCodes: newQrCodes,
          });

          socketManager.leaveSession(sessionId);
          console.log(`üì± Left session: ${sessionId}`);
        },

        joinAllSessions: () => {
          const { sessions, joinSession, sessionStatuses } = get();

          if (!socketManager.isConnected()) {
            console.warn("‚ö†Ô∏è Socket n√£o conectado para joinAllSessions");
            return;
          }

          // Apenas fazer join em sess√µes que ainda n√£o est√£o sendo monitoradas
          const sessionsToJoin = sessions.filter(
            (session) => !sessionStatuses[session.id]
          );

          sessionsToJoin.forEach((session) => {
            joinSession(session.id);
          });

          console.log(
            `‚úÖ Auto-join realizado em ${sessionsToJoin.length}/${sessions.length} sess√µes`
          );
        },

        // Gerenciamento de Status de Sess√µes
        updateSessionStatus: (
          sessionId: string,
          status: string,
          error?: string
        ) => {
          const { sessionStatuses, sessions } = get();

          // Atualizar sessionStatuses (para uso interno via Socket)
          set({
            sessionStatuses: {
              ...sessionStatuses,
              [sessionId]: {
                status: status as any,
                lastActivity: new Date().toLocaleString("pt-BR"),
                error,
              },
            },
          });

          // üéØ TAMB√âM atualizar o status no array sessions (para uso na p√°gina principal)
          const updatedSessions = sessions.map((session) =>
            session.id === sessionId ? { ...session, status } : session
          );

          if (updatedSessions.length > 0) {
            // metodo set ai para persistir o estado
            // Atualizar o estado com o novo array de sess√µes
            set({ sessions: updatedSessions });
            console.log(
              `üìä Status da sess√£o ${sessionId} atualizado no array sessions: ${status}`
            );
          }
        },

        // Gerenciamento de QR Codes
        setSessionQrCode: (
          sessionId: string,
          qrCode: string,
          timestamp?: string
        ) => {
          const { sessionQrCodes } = get();
          set({
            sessionQrCodes: {
              ...sessionQrCodes,
              [sessionId]: {
                qrCode,
                timestamp: timestamp || new Date().toISOString(),
              },
            },
          });
        },

        getSessionQrCode: (sessionId: string) => {
          const { sessionQrCodes } = get();
          return sessionQrCodes[sessionId]?.qrCode || null;
        },

        clearSessionQrCode: (sessionId: string) => {
          const { sessionQrCodes } = get();
          const newQrCodes = { ...sessionQrCodes };
          delete newQrCodes[sessionId];
          set({ sessionQrCodes: newQrCodes });
        },

        getSessionStatus: (sessionId: string) => {
          const { sessionStatuses } = get();
          return sessionStatuses[sessionId]?.status || null;
        },

        // Socket Event Listeners
        setupSocketListeners: () => {
          // NOTA: Esta fun√ß√£o est√° deprecated
          // Use o hook useSocket() em vez de listeners no store
          console.warn("‚ö†Ô∏è setupSocketListeners est√° deprecated. Use useSocket() hook em components.");
        },

        cleanupSocketListeners: () => {
          // NOTA: Esta fun√ß√£o est√° deprecated
          // Use o hook useSocket() em vez de listeners no store
          console.warn("‚ö†Ô∏è cleanupSocketListeners est√° deprecated. Use useSocket() hook em components.");
        },

        // Utilit√°rios
        setLoading: (loading: boolean) => set({ isLoading: loading }),
        setError: (error: string | null) => set({ error }),
      }),
      {
        name: "sessions-storage",
        partialize: (state) => ({
          sessions: state.sessions,
          sessionStatuses: state.sessionStatuses,
          sessionQrCodes: state.sessionQrCodes,
        }),
      }
    ),
    {
      name: "sessions-store",
    }
  )
);
