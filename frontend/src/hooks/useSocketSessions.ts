import { socketService } from "@/services/socket";
import { useAuthStore } from "@/store/auth";
import { useSessionsStore } from "@/store/sessions";
import { useEffect } from "react";

/**
 * Hook para gerenciar listeners espec√≠ficos de sess√µes
 * Assume que o socket j√° foi inicializado pelo useSocketInitializer
 */
export function useSocketSessions() {
  const {
    sessions,
    joinAllSessions,
    setupSocketListeners,
    cleanupSocketListeners,
  } = useSessionsStore();
  const { isAuthenticated } = useAuthStore();

  // üî• EFEITO 1: Configurar listeners de sess√µes quando socket estiver conectado
  useEffect(() => {
    if (!isAuthenticated || !socketService.isConnected()) {
      return;
    }

    // Apenas configurar listeners espec√≠ficos de sess√µes
    setupSocketListeners();
    console.log("‚úÖ Listeners de sess√µes configurados");

    // Cleanup ao desmontar ou perder autentica√ß√£o
    return () => {
      cleanupSocketListeners();
      console.log("üßπ Socket listeners de sess√µes removidos");
    };
  }, [isAuthenticated, setupSocketListeners, cleanupSocketListeners]);

  // üî• EFEITO 2: Auto-join baseado nas sess√µes atuais (apenas uma vez por mudan√ßa)
  useEffect(() => {
    if (
      !isAuthenticated ||
      !socketService.isConnected() ||
      sessions.length === 0
    ) {
      return;
    }

    // Aguardar um pouco para o socket estar completamente pronto
    const timeoutId = setTimeout(() => {
      joinAllSessions();
      console.log(`üì± Auto-join realizado em ${sessions.length} sess√µes`);
    }, 100);

    return () => clearTimeout(timeoutId);
  }, [isAuthenticated, sessions.length, joinAllSessions]); // Usar length em vez do array completo

  return {
    // Fun√ß√µes utilit√°rias
    joinAllSessions,
    isSocketConnected: socketService.isConnected(),
    sessionsCount: sessions.length,
  };
}
