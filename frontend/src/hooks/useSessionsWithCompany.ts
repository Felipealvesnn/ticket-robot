import { useAuthStore } from "@/store/auth";
import { useSessionsStore } from "@/store/sessions";
import { useEffect } from "react";

/**
 * Hook que conecta o store de sess√µes com o store de auth
 * Automaticamente recarrega sess√µes quando a empresa atual muda
 *
 * NOTA: O join autom√°tico nas sess√µes √© feito pelo SessionsAutoJoiner
 * que fica no AuthProvider, ent√£o n√£o precisa ser feito aqui.
 */
export function useSessionsWithCompany() {
  const { currentCompanyId } = useAuthStore();
  const {
    sessions,
    isLoading,
    error,
    isReloadingForCompany,
    handleCompanyChange,
    loadSessions,
    addSession,
    removeSession,
    restartSession,
    // Socket states
    sessionStatuses,
    sessionQrCodes,
    getSessionStatus,
    getSessionQrCode,
  } = useSessionsStore();

  // Carregar sess√µes apenas se ainda n√£o foram carregadas
  // (o SessionsAutoJoiner j√° faz isso quando muda a empresa)
  useEffect(() => {
    if (sessions.length === 0 && !isLoading && currentCompanyId) {
      console.log("üì± useSessionsWithCompany: Carregando sess√µes iniciais...");
      loadSessions();
    }
  }, [sessions.length, isLoading, currentCompanyId, loadSessions]);

  // Escutar mudan√ßas na empresa atual e recarregar sess√µes automaticamente
  useEffect(() => {
    if (currentCompanyId) {
      console.log("üè¢ Hook detectou mudan√ßa de empresa:", currentCompanyId);
      handleCompanyChange();
    }
  }, [currentCompanyId, handleCompanyChange]);

  return {
    // Estados das sess√µes
    sessions,
    isLoading,
    error,
    isReloadingForCompany,

    // A√ß√µes CRUD
    addSession,
    removeSession,
    restartSession,
    loadSessions,

    // Estados de Socket/QR Code
    sessionStatuses,
    sessionQrCodes,
    getSessionStatus,
    getSessionQrCode,

    // Estado da empresa atual (apenas leitura)
    currentCompanyId,
  };
}
