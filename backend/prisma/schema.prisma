generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Company {
  id                String              @id @default(cuid())
  name              String
  slug              String              @unique
  domain            String?             @unique
  plan              String              @default("FREE")
  isActive          Boolean             @default(true)
  maxUsers          Int                 @default(5)
  maxSessions       Int                 @default(3)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  businessHours     BusinessHours[]
  chatFlows         ChatFlow[]
  invitations       CompanyInvitation[]
  companyUsers      CompanyUser[]
  contactFlowStates ContactFlowState[]
  contacts          Contact[]
  holidays          Holiday[]
  ignoredContacts   IgnoredContact[]
  media             Media[]
  messages          Message[]
  messagingSessions MessagingSession[]
  subscriptions     Subscription[]
  tickets           Ticket[]

  @@map("companies")
}

model Role {
  id           String        @id @default(cuid())
  name         String        @unique
  description  String?
  permissions  String        @db.NText
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  companyUsers CompanyUser[]

  @@map("roles")
}

model User {
  id              String              @id @default(cuid())
  email           String              @unique
  password        String
  name            String
  avatar          String?
  isActive        Boolean             @default(true)
  isFirstLogin    Boolean             @default(true)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  address         String?
  phone           String?
  sentInvitations CompanyInvitation[] @relation("InvitedBy")
  companyUsers    CompanyUser[]
  refreshTokens   RefreshToken[]
  sessions        Session[]
  ticketAgents    TicketAgent[]       @relation("TicketAgents")

  @@map("users")
}

model CompanyUser {
  id        String   @id @default(cuid())
  userId    String
  companyId String
  roleId    String
  isActive  Boolean  @default(true)
  joinedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, companyId])
  @@map("company_users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  isRevoked Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Session {
  id              String   @id @default(cuid())
  userId          String
  token           String   @unique
  userAgent       String?
  ipAddress       String?
  expiresAt       DateTime
  createdAt       DateTime @default(now())
  lastUsed        DateTime @default(now())
  accuracy        Float?
  browser         String?
  browserVersion  String?
  city            String?
  country         String?
  deviceId        String?
  deviceName      String?
  deviceType      String?
  isFirstLogin    Boolean  @default(true)
  isTrusted       Boolean  @default(false)
  latitude        Float?
  longitude       Float?
  operatingSystem String?
  region          String?
  timezone        String?
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model CompanyInvitation {
  id          String    @id @default(cuid())
  email       String
  companyId   String
  roleId      String
  token       String    @unique
  status      String    @default("PENDING")
  invitedBy   String
  expiresAt   DateTime
  createdAt   DateTime  @default(now())
  acceptedAt  DateTime?
  company     Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  invitedUser User      @relation("InvitedBy", fields: [invitedBy], references: [id])

  @@unique([email, companyId])
  @@map("company_invitations")
}

model Ticket {
  id                 String           @id @default(cuid())
  companyId          String
  contactId          String
  title              String?
  description        String?          @db.NText
  status             String           @default("OPEN")
  priority           String           @default("MEDIUM")
  category           String?
  source             String           @default("MESSAGING")
  firstResponseAt    DateTime?
  resolvedAt         DateTime?
  closedAt           DateTime?
  tags               String?          @db.NText
  metadata           String?          @db.NText
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  messagingSessionId String
  autoCloseAt        DateTime?
  lastMessageAt      DateTime?
  messages           Message[]
  agents             TicketAgent[]
  history            TicketHistory[]
  company            Company          @relation(fields: [companyId], references: [id], onUpdate: NoAction)
  contact            Contact          @relation(fields: [contactId], references: [id], onDelete: Cascade)
  messagingSession   MessagingSession @relation(fields: [messagingSessionId], references: [id], onUpdate: NoAction)

  @@map("tickets")
}

model TicketAgent {
  id       String    @id @default(cuid())
  ticketId String
  userId   String
  role     String    @default("AGENT")
  joinedAt DateTime  @default(now())
  leftAt   DateTime?
  isActive Boolean   @default(true)
  ticket   Ticket    @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user     User      @relation("TicketAgents", fields: [userId], references: [id], onUpdate: NoAction)

  @@unique([ticketId, userId])
  @@map("ticket_agents")
}

model TicketHistory {
  id        String   @id @default(cuid())
  ticketId  String
  userId    String?
  action    String
  fromValue String?
  toValue   String?
  comment   String?  @db.NText
  createdAt DateTime @default(now())
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@map("ticket_history")
}

model MessagingSession {
  id                String             @id @default(cuid())
  companyId         String
  name              String
  platform          String             @default("WHATSAPP")
  phoneNumber       String?
  username          String?
  platformId        String?
  qrCode            String?
  accessToken       String?
  status            String             @default("DISCONNECTED")
  isActive          Boolean            @default(true)
  lastSeen          DateTime?
  config            String?            @db.NText
  webhookUrl        String?
  metadata          String?            @db.NText
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  contactFlowStates ContactFlowState[]
  contacts          Contact[]
  ignoredContacts   IgnoredContact[]
  messages          Message[]
  company           Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)
  tickets           Ticket[]

  @@unique([companyId, platform, phoneNumber])
  @@unique([companyId, platform, username])
  @@map("messaging_sessions")
}

model ChatFlow {
  id                String             @id @default(cuid())
  companyId         String
  name              String
  description       String?
  nodes             String             @db.NText
  edges             String             @db.NText
  triggers          String             @db.NText
  isActive          Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  company           Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)
  contactFlowStates ContactFlowState[]

  @@map("chat_flows")
}

model ContactFlowState {
  id                 String               @id @default(cuid())
  companyId          String
  contactId          String
  chatFlowId         String
  currentNodeId      String
  isActive           Boolean              @default(true)
  variables          String?              @db.NText
  awaitingInput      Boolean              @default(false)
  inputType          String?
  timeoutAt          DateTime?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  messagingSessionId String
  flowHistory        ContactFlowHistory[]
  chatFlow           ChatFlow             @relation(fields: [chatFlowId], references: [id], onUpdate: NoAction)
  company            Company              @relation(fields: [companyId], references: [id], onUpdate: NoAction)
  contact            Contact              @relation(fields: [contactId], references: [id], onDelete: Cascade)
  messagingSession   MessagingSession     @relation(fields: [messagingSessionId], references: [id], onUpdate: NoAction)

  @@unique([companyId, messagingSessionId, contactId, isActive])
  @@map("contact_flow_states")
}

model ContactFlowHistory {
  id                 String           @id @default(cuid())
  contactFlowStateId String
  nodeId             String
  nodeType           String
  action             String
  input              String?          @db.NText
  output             String?          @db.NText
  conditionResult    String?
  variables          String?          @db.NText
  executionTime      Int?
  createdAt          DateTime         @default(now())
  contactFlowState   ContactFlowState @relation(fields: [contactFlowStateId], references: [id], onDelete: Cascade)

  @@map("contact_flow_history")
}

model Contact {
  id                 String             @id @default(cuid())
  companyId          String
  phoneNumber        String
  name               String?
  avatar             String?
  lastMessage        String?
  lastMessageAt      DateTime?
  isBlocked          Boolean            @default(false)
  tags               String?            @db.NText
  customFields       String?            @db.NText
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  messagingSessionId String
  flowStates         ContactFlowState[]
  company            Company            @relation(fields: [companyId], references: [id], onUpdate: NoAction)
  messagingSession   MessagingSession   @relation(fields: [messagingSessionId], references: [id], onDelete: Cascade)
  messages           Message[]
  tickets            Ticket[]

  @@unique([companyId, phoneNumber])
  @@map("contacts")
}

model Message {
  id                 String           @id @default(cuid())
  companyId          String
  contactId          String
  ticketId           String?
  content            String           @db.NText
  type               String           @default("TEXT")
  direction          String
  mediaUrl           String?
  isRead             Boolean          @default(false)
  isFromBot          Boolean          @default(false)
  metadata           String?          @db.NText
  createdAt          DateTime         @default(now())
  messagingSessionId String
  isMe               Boolean          @default(false)
  company            Company          @relation(fields: [companyId], references: [id], onUpdate: NoAction)
  contact            Contact          @relation(fields: [contactId], references: [id], onUpdate: NoAction)
  messagingSession   MessagingSession @relation(fields: [messagingSessionId], references: [id], onUpdate: NoAction)
  ticket             Ticket?          @relation(fields: [ticketId], references: [id])

  @@map("messages")
}

model Subscription {
  id                   String   @id @default(cuid())
  companyId            String
  plan                 String
  status               String
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean  @default(false)
  stripeSubscriptionId String?  @unique
  stripePriceId        String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  company              Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model BusinessHours {
  id         String   @id @default(cuid())
  companyId  String
  dayOfWeek  Int
  isActive   Boolean  @default(true)
  startTime  String
  endTime    String
  breakStart String?
  breakEnd   String?
  timezone   String   @default("America/Sao_Paulo")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  company    Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, dayOfWeek])
  @@map("business_hours")
}

model Holiday {
  id          String   @id @default(cuid())
  companyId   String
  name        String
  date        DateTime
  type        String   @default("HOLIDAY")
  startTime   String?
  endTime     String?
  isRecurring Boolean  @default(false)
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("holidays")
}

model IgnoredContact {
  id                 String            @id @default(cuid())
  companyId          String
  messagingSessionId String?
  phoneNumber        String
  name               String?
  reason             String?
  type               String            @default("MANUAL")
  isActive           Boolean           @default(true)
  ignoreBotOnly      Boolean           @default(true)
  createdBy          String?
  notes              String?           @db.NText
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  company            Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  messagingSession   MessagingSession? @relation(fields: [messagingSessionId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([companyId, messagingSessionId, phoneNumber])
  @@unique([companyId, phoneNumber])
  @@map("ignored_contacts")
}

model Media {
  id            String   @id @default(cuid())
  originalName  String
  mimeType      String
  size          Int
  url           String
  containerName String
  blobName      String
  companyId     String
  uploadedBy    String
  isPublic      Boolean  @default(false)
  metadata      String?  @db.NText
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  company       Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId])
  @@index([mimeType])
  @@index([uploadedBy])
  @@map("media")
}
